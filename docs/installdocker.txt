Install in all machine:- 

1.Uninstall old versions
   sudo apt-get remove docker docker-engine docker.io containerd runc
2. Install using the repository
    $ sudo apt-get update

	$ sudo apt-get install \
		apt-transport-https \
		ca-certificates \
		curl \
		gnupg-agent \
		software-properties-common	  
3.Add Docker’s official GPG key:
	$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
4. sudo apt-key fingerprint 0EBFCD88

5. sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
6. $ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io   
 
 
 --------------------------------------------------------------------------------------------------------
 
 
 After install docker in all machine using command mentioned above
 
 install-kubeadm in all machine
 
 
 
 sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


systemctl daemon-reload
systemctl restart kubelet


---------------------------------------------------------------------------------------------------------------
search in google single controller panel kubernetes


run on master:- 
To follow this guide, you need:

One or more machines running a deb/rpm-compatible Linux OS; for example: Ubuntu or CentOS.
2 GiB or more of RAM per machine--any less leaves little room for your apps.
At least 2 CPUs on the machine that you use as a control-plane node.
Full network connectivity among all machines in the cluster. You can use either a public or a private network.




kubeadm init

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf



Calico is a networking and network policy provider. Calico supports a flexible set of networking options so you can choose the most efficient option for your situation, including non-overlay and overlay networks, with or without BGP. Calico uses the same engine to enforce network policy for hosts, pods, and (if using Istio & Envoy) applications at the service mesh layer. Calico works on several architectures, including amd64, arm64, and ppc64le.

By default, Calico uses 192.168.0.0/16 as the Pod network CIDR, though this can be configured in the calico.yaml file. For Calico to work correctly, you need to pass this same CIDR to the kubeadm init command using the --pod-network-cidr=192.168.0.0/16 flag or via kubeadm’s configuration.

$ kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml

$ kubeadm token list

kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>



 


------------------------------------------------     kubernetes dashboard   -------------------------------------------
 1. kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

 2. kubectl proxy
 3. http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/overview?namespace=default
 
 4. kubectl create serviceaccount dashboard -n default   # create service account
 5. kubectl create clusterrolebinding dashboard-admin -n default \
     --clusterrole=cluster-admin \
	 --serviceaccount= default:dashboard
 6. $ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk '/^deployment-controller-token-/{print $1}') | awk '$1=="token:"{print $2}'
 
 
 
 
 SOLVE CALICO 
 https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
 
 
 http://jodies.de/ipcalc?host=10.217.0.0&mask1=16&mask2=
 
 
 kubeadm join 172.31.27.210:6443 --token eeqipr.qul70pasb69staeg \
    --discovery-token-ca-cert-hash sha256:1837acff835cd5ac586ded5851d29af4ccdbbe44d3e55765bba7e88b3e8c369b



	https://devops.ionos.com/tutorials/getting-started-with-a-multi-node-kubernetes-cluster-on-ubuntu/