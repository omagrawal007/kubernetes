



$ sudo su
$ apt-get update
$ swapoff -a
$ nano /etc/fstab # comment swap line (UUID=eee....)
 or 
 $ sed -i '/ swap / s/^/#/' /etc/fstab
master:- 

$nano /etc/hostname # set hostname on this file

setup static ip
	nano /etc/network/interfaces
-------------------	
auto enp0s8
iface enp0s8 inet static
address <IP-Address-Of-VM>
----------------------

sudo apt-get install openssh-server 

# sudo su
# apt-get update 
# apt-get install -y docker.io

Run the following commands before installing the Kubernetes environment.

# apt-get update && apt-get install -y apt-transport-https curl
# sudo apt-key adv --keyserver keyserver.ubuntu.com --keyserver-options http-proxy=http://web-proxy.corp.hp.com:8080 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886


# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -  

if throwing error set proxy
# cat ~/.curlrc     #  proxy= web-proxy.corp.hp.com:8080

# cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
  #deb http://apt.kubernetes.io/ kubernetes-xenial main
  deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
EOF
# apt-get update





Install kubeadm, Kubelet And Kubectl 
 apt-get install -y kubelet kubeadm kubectl 
 
 nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
 
 This will open a text editor, enter the following line after the last “Environment Variable”:
    Environment="cgroup-driver=systemd/cgroup-driver=cgroupfs"
	
	
1. Steps Only For Kubernetes Master VM (kmaster)
   
   Step 1: We will now start our Kubernetes cluster from the master’s machine. Run the following command:
         # kubeadm init --apiserver-advertise-address=<ip-address-of-kmaster-vm> --pod-network-cidr=192.168.0.0/16
         # kubeadm init --apiserver-advertise-address=15.97.199.1 --pod-network-cidr=192.168.0.0/16
		 
			You will get the below output. The commands marked as (1), execute them as a non-root user. This will enable you to use kubectl from the CLI
			The command marked as (2) should also be saved for future. This will be used to join nodes to your cluster

   Step 2: As entioned before, run the commands from the above output as a non-root user
         $ mkdir -p $HOME/.kube
		 $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
		 $ sudo chown $(id -u):$(id -g) $HOME/.kube/config
------------------------------------------------------------------
kubeadm reset
systemctl restart kubelet
kubeadm init

sudo netstat -lnp | grep 10250
sudo kill Process_PID

http://dockerlabs.collabnix.com/kubernetes/beginners/Install-and-configure-a-multi-master-Kubernetes-cluster-with-kubeadm.html




----------------------------------------------
[ERROR Port-6443]: Port 6443 is in use
        [ERROR Port-10259]: Port 10259 is in use
        [ERROR Port-10257]: Port 10257 is in use
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml]: /etc/kubernetes/manifests/kube-controller-manager.yaml already exists
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml]: /etc/kubernetes/manifests/kube-scheduler.yaml already exists
        [ERROR FileAvailable--etc-kubernetes-manifests-etcd.yaml]: /etc/kubernetes/manifests/etcd.yaml already exists
        [ERROR Port-10250]: Port 10250 is in use
        [ERROR Port-2379]: Port 2379 is in use
        [ERROR Port-2380]: Port 2380 is in use
		 

----------------------------------------------------
kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

kubectl taint nodes --all node-role.kubernetes.io/master-
		 